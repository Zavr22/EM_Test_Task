package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"

	models1 "github.com/Zavr22/EMTestTask/pkg/graph/models"
	"github.com/Zavr22/EMTestTask/pkg/models"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, fio models1.Fio) (string, error) {
	user := &models.FIO{
		Name:       fio.Name,
		Surname:    fio.Surname,
		Patronymic: *fio.Patronymic,
	}

	userID, err := r.userService.CreateUser(ctx, user)
	if err != nil {
		return "", err
	}

	return userID.String(), nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, userID string, input models1.EnrichedFio) (*models1.CommonResponse, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid userID: %s", userID)
	}
	fio := models.FIO{
		Name:       input.Name,
		Surname:    input.Surname,
		Patronymic: *input.Patronymic}

	user := models.EnrichedFIO{
		FIO:         fio,
		Age:         input.Age,
		Gender:      input.Gender,
		Nationality: input.Nationality,
	}

	err = r.userService.UpdateProfile(ctx, userUUID, user)
	if err != nil {
		return nil, err
	}

	response := &models1.CommonResponse{
		Message: "Profile updated successfully",
	}

	return response, nil
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context, userID string) (*models1.CommonResponse, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid userID: %s", userID)
	}

	err = r.userService.DeleteProfile(ctx, userUUID)
	if err != nil {
		return nil, err
	}

	response := &models1.CommonResponse{
		Message: "Profile deleted successfully",
	}

	return response, nil
}

// EnrichAndSaveToDb is the resolver for the enrichAndSaveToDB field.
func (r *mutationResolver) EnrichAndSaveToDb(ctx context.Context, name string, surname string, patronymic *string) (string, error) {
	userID, err := r.userService.EnrichAndSaveToDB(ctx, name, surname, *patronymic)
	if err != nil {
		return "", err
	}

	return userID.String(), nil
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context, page int) ([]*models1.UserU, error) {
	offset := (page - 1) * 30

	users, err := r.userService.GetAllUsers(ctx, offset)
	if err != nil {
		return nil, err
	}
	var usersResponse []*models1.UserU
	for _, user := range users {
		fio := &models1.FIOResponse{
			Name:       user.Name,
			Surname:    user.Surname,
			Patronymic: &user.Patronymic,
		}
		user := &models1.UserU{
			ID:          user.ID.String(),
			Fio:         fio,
			Age:         user.Age,
			Gender:      user.Gender,
			Nationality: user.Nationality,
		}
		usersResponse = append(usersResponse, user)
	}
	return usersResponse, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*models1.UserU, error) {
	userUUID, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid userID: %s", userID)
	}

	user, err := r.userService.GetUser(ctx, userUUID)
	if err != nil {
		return nil, err
	}
	fio := &models1.FIOResponse{
		Name:       user.Name,
		Surname:    user.Surname,
		Patronymic: &user.Patronymic,
	}
	userResponse := &models1.UserU{
		ID:          user.ID.String(),
		Fio:         fio,
		Age:         user.Age,
		Gender:      user.Gender,
		Nationality: user.Nationality,
	}

	return userResponse, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
